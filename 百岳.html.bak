<!DOCTYPE html>
<html lang="zh-Hant">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>步程時間估算器｜百岳 JSON 版（支援經途點）</title>
<style>
  body{font-family:Arial,Helvetica,sans-serif;line-height:1.6;padding:1rem;max-width:960px;margin:auto}
  img{width:100%;height:auto;border-radius:0.75rem;box-shadow:0 4px 12px rgba(0,0,0,.1)}
  h2{margin-top:.75rem}
  .controls{margin-top:1rem;display:flex;flex-wrap:wrap;gap:.75rem;align-items:center}
  label{font-weight:700}
  select,input[type=number]{padding:.25rem .5rem;border-radius:.4rem}
  select{min-width:7rem}
  .waypoints{display:flex;flex-direction:column;max-height:200px;overflow:auto;border:1px solid #ccc;padding:.5rem;border-radius:.5rem;width:200px}
  button{padding:.4rem .85rem;cursor:pointer;border:none;border-radius:.5rem;background:#4caf50;color:#fff;font-weight:600}
  #output{margin-top:1.25rem;font-size:1.05rem;white-space:pre-wrap}
  ul{padding-left:1.25rem}
  li{margin:.25rem 0}
  .warn{color:#d32f2f}
</style>
</head>
<body>
<h2>步程時間估算器</h2>
<img id="routeImg" src="bai_gu_route.png" alt="路線示意圖" />
<div class="controls">
  <label for="route">路線：</label>
  <select id="route">
    <option value="白姑大山">白姑大山</option>
    <option value="玉山群峰">玉山群峰</option>
  </select>

  <label for="start">起點：</label>
  <select id="start"></select>

  <label for="end">終點：</label>
  <select id="end"></select>

  <label for="factor">倍率(0.1–2)：</label>
  <input id="factor" type="number" min="0.1" max="2" step="0.1" value="1" />

  <button id="runBtn">計算</button>
</div>

<!-- 經途點清單 -->
<p><strong>選擇想經過的節點（可多選，按住 Ctrl / ⌘）：</strong></p>
<select id="waypoints" class="waypoints" multiple></select>

<div id="output"></div>

<script>
/*******************
 * 1. 路線 meta
 *******************/
const ROUTE_META={
  "白姑大山":{id:"bai_gu",img:""},
  "玉山群峰":{id:"yushan",img:""}
};

const cache={};
async function loadRoute(name){
  if(cache[name]) return cache[name];
  const meta=ROUTE_META[name];
  const res=await fetch(`routes/${meta.id}.json`);
  if(!res.ok){alert('載入路線資料失敗');return null;}
  const json=await res.json();
  cache[name]=json;return json;
}

/******************* DOM refs *******************/
const routeSel=document.getElementById('route');
const startSel=document.getElementById('start');
const endSel=document.getElementById('end');
const wpSel=document.getElementById('waypoints');
const factorInp=document.getElementById('factor');
const runBtn=document.getElementById('runBtn');
const routeImg=document.getElementById('routeImg');
const output=document.getElementById('output');

/******************* helpers *******************/
function renderNodeSelects(nodes){
  startSel.innerHTML='';endSel.innerHTML='';wpSel.innerHTML='';
  nodes.forEach(n=>{
    startSel.add(new Option(n,n));
    endSel.add(new Option(n,n));
    wpSel.add(new Option(n,n));
  });
  startSel.selectedIndex=0;
  endSel.selectedIndex=nodes.length-1;
}

function buildAdj(edges){
  const adj={};
  edges.forEach(({from,to})=>{(adj[from]=adj[from]||[]).push(to);(adj[to]=adj[to]||[]).push(from);});
  return adj;
}
function bfs(a,b,edges){
  const adj=buildAdj(edges);const q=[[a]];const seen=new Set([a]);
  while(q.length){const p=q.shift();const last=p[p.length-1];if(last===b) return p;
    (adj[last]||[]).forEach(n=>{if(!seen.has(n)){seen.add(n);q.push([...p,n]);}});
  }
  return null;
}

function calc(route){
  const factor=parseFloat(factorInp.value);
  if(isNaN(factor)||factor<0.1||factor>2){alert('倍率需 0.1–2');return;}
  const start=startSel.value,end=endSel.value;
  const checkpoints=[...Array.from(wpSel.selectedOptions).map(o=>o.value)];
  const seq=[start,...checkpoints,end];
  const edges=route.edges;

  let fullPath=[];let total=0;let html='<ul>';
  for(let i=0;i<seq.length-1;i++){
    const part=bfs(seq[i],seq[i+1],edges);
    if(!part){output.innerHTML=`<p class="warn">${seq[i]} ↔ ${seq[i+1]} 無路徑</p>`;return;}
    if(i>0) part.shift(); // avoid duplicate node
    fullPath=fullPath.concat(part);
  }
  // compute time
  for(let i=0;i<fullPath.length-1;i++){
    const a=fullPath[i],b=fullPath[i+1];
    const e=edges.find(x=>(x.from===a&&x.to===b)||(x.from===b&&x.to===a));
    if(!e){html+=`<li class="warn">缺少 ${a}↔${b} 資料</li>`;continue;}
    const up=(e.from===a&&e.to===b);
    const mins=Math.round((up?e.up:e.down)*factor);
    total+=mins;
    html+=`<li>${a} → ${b}：<strong>${mins} 分</strong> (${up?'上坡':'下坡'})</li>`;
  }
  html+='</ul>';
  html+=`<p><strong>累計時間：</strong>${total} 分 ≈ ${(total/60).toFixed(1)} 小時</p>`;
  output.innerHTML=html;
}

/******************* init & events *******************/
async function init(){
  const name=routeSel.value;routeImg.src=ROUTE_META[name].img;
  const data=await loadRoute(name);if(!data)return;
  renderNodeSelects(data.nodes);
  calc(data);
}
routeSel.addEventListener('change',init);
runBtn.addEventListener('click',async()=>{const data=cache[routeSel.value]||await loadRoute(routeSel.value);if(data)calc(data);});

document.addEventListener('DOMContentLoaded',init);
</script>
</body>
</html>
